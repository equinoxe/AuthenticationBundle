<?php

namespace Equinoxe\AuthenticationBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;

/**
 * Test class for User.
 * Generated by PHPUnit on 2011-02-01 at 08:38:12.
 */
class UserTest extends \Equinoxe\TestBundle\Test\WebTestCase
{

    /**
     * @var User
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new User;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testIsAccountNonExpired()
    {
        // Default should be not expired.
        $this->assertTrue($this->object->isAccountNonExpired());

        // Set now as expire date. Should make it expired.
        $targetTime = new \DateTime();
        $this->object->setAccountExpireDate($targetTime);
        $this->assertFalse($this->object->isAccountNonExpired());

        // A future date should result in being not expired.
        $targetTime->add(new \DateInterval('P2D'));
        $this->object->setAccountExpireDate($targetTime);
        $this->assertTrue($this->object->isAccountNonExpired());
    }

    public function testIsAccountNonLocked()
    {
        // Default should be not locked.
        $this->assertTrue($this->object->isAccountNonLocked());

        // Lock it.
        $this->object->lock();
        $this->assertFalse($this->object->isAccountNonLocked());

        //Unlock it again.
        $this->object->unlock();
        $this->assertTrue($this->object->isAccountNonLocked());
    }

    /**
     * @todo Implement testIsCredentialsNonExpired().
     */
    public function testIsCredentialsNonExpired()
    {
        // Default should be not expired.
        $this->assertTrue($this->object->isCredentialsNonExpired());

        // Set now as expire date. Should make it expired.
        $targetTime = new \DateTime();
        $this->object->setCredentialsExpireDate($targetTime);
        $this->assertFalse($this->object->isCredentialsNonExpired());

        // A future date should result in being not expired.
        $targetTime->add(new \DateInterval('P2D'));
        $this->object->setCredentialsExpireDate($targetTime);
        $this->assertTrue($this->object->isCredentialsNonExpired());
    }

    /**
     * @todo Implement testIsEnabled().
     */
    public function testIsEnabled()
    {
        // Default should be true.
        $this->assertTrue($this->object->isEnabled());

        // Disable it.
        $this->object->disable();
        $this->assertFalse($this->object->isEnabled());

        // Enable it again.
        $this->object->enable();
        $this->assertTrue($this->object->isEnabled());
    }

    public function test__toString()
    {
        $this->object->setUsername('Samplename');
        $this->assertEquals('Samplename', $this->object->__toString());
    }

    public function testGetRoles()
    {
        $collection = new ArrayCollection();
        $this->object->setRoles($collection);
        $this->assertSame($collection->toArray(), $this->object->getRoles());
    }

    /**
     * Tests addRole, hasRole and removeRole.
     *
     */
    public function testRoleHandling()
    {
        // Create role.
        $testString = $this->generateRandomString();
        $role = new Role($testString);

        // Assign it.
        $this->object->addRole($role);
        $this->assertTrue($this->object->hasRole($role));

        // Remove it again.
        $this->object->removeRole($role);
        $this->assertFalse($this->object->hasRole($role));
    }

    public function testRolePersistence()
    {
        // Get entity manager.
        $container = $this->createContainer();
        $em = $container->get('doctrine.orm.entity_manager');

        $username = $this->generateRandomString();
        $password = $this->generateRandomString();

        $this->object->setUsername($username);
        $this->object->setPassword($password);
        $em->persist($this->object);

        // Create role and persist it.
        $testString = $this->generateRandomString();
        $role = new Role($testString);
        $em->persist($role);

        // Assign it.
        $this->object->addRole($role);

        // Write things to the database.
        $em->flush();

        $query = $em->createQuery("SELECT u FROM \Equinoxe\AuthenticationBundle\Entity\User u WHERE u.uid = " . $this->object->getUid());
        $users = $query->getResult();
        $user = $users[0];
        $this->assertTrue($user->hasRole($role));
    }

    public function testGetPassword()
    {
        $testString = $this->generateRandomString();
        $this->object->setPassword($testString);
        $this->assertEquals($testString, $this->object->getPassword());
    }

    public function testGetSalt()
    {
        $this->object->setUid(4);
        $this->assertEquals(4, $this->object->getSalt());
    }

    public function testGetUsername()
    {
        $this->object->setUsername('Samplename');
        $this->assertEquals('Samplename', $this->object->getUsername());
    }

    public function testGetUid()
    {
        $this->object->setUid(4);
        $this->assertEquals(4, $this->object->getUid());
    }

    public function testGetCredentialsExpireDate()
    {
        $targetTime = new \DateTime();
        $this->object->setCredentialsExpireDate($targetTime);
        $this->assertSame($targetTime, $this->object->getCredentialsExpireDate());
    }

    public function testGetAccountExpireDate()
    {
        $targetTime = new \DateTime();
        $this->object->setAccountExpireDate($targetTime);
        $this->assertSame($targetTime, $this->object->getAccountExpireDate());
    }

    public function testEraseCredentials()
    {
        // First set password.
        $testString = $this->generateRandomString();
        $this->object->setPassword($testString);

        // Delete it.
        $this->object->eraseCredentials();

        $this->assertSame(null, $this->object->getPassword());
    }
}
